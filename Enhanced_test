Other extra plugin.xml
action/services

<action id="TestContextAction"
                class="com.yourplugin.sparklineageplugin.LineageAction"
                text="Generate Test"
                description="Trigger lineage for selected method">
            <add-to-group group-id="EditorPopupMenu" anchor="after" relative-to-action="LineageContextAction"/>
        </action>
        <action id="ShowSettingsDialogAction"
                class="com.yourplugin.sparklineageplugin.ShowSettingsDialogAction"
                text="Unit Test Settings"
                description="Edit Unit Test generation settings">
            <add-to-group group-id="ToolsMenu" anchor="last"/>
        </action>
    </actions>

    <extensions defaultExtensionNs="com.intellij">
        <applicationService serviceImplementation="com.yourplugin.sparklineageplugin.settings.UnitTestSettingsState"/>
    </extensions>


 if(actionContext.equalsIgnoreCase("Generate Test")) {

            System.out.println("Inside Generate Test");
            if (psiFile instanceof PsiJavaFile && project != null) {

                PsiClass psiClass = PsiTreeUtil.getParentOfType(element, PsiClass.class);

                //  PsiClass[] classes = ((PsiJavaFile) file).getClasses();
                //if (classes.length > 0) {
                //PsiClass targetClass = classes[0];
                // String classCode = targetClass.getText();

                UnitTestSettingsDialog dialog = new UnitTestSettingsDialog();
                if (!dialog.showAndGet()) return;

                UnitTestSettingsState settings = dialog.getVersionSettings();
                String fullCode = new SparkCodeCollector().collectFullMethodContext(method);

                if (fullCode == null || fullCode.isEmpty()) {
                    Messages.showErrorDialog("Could not collect method context.", "Collection Failed");
                    return;
                }

                String className = psiClass.getName();
                String testClassName = className + "Test";
                String packageName = ((PsiJavaFile) psiFile).getPackageName();
                String promptBuilder = PromptBuilder.getPrompt(settings.javaVersion,
                        settings.sparkVersion, settings.mockitoVersion, settings.language,
                        settings.framework, fullCode, className, testClassName, packageName);

                String result = LLMClient.sendPrompt(promptBuilder);
                System.out.println(result);
                String TestCodeGenerated=CodeExtractor.extractJavaCode(result);
                WriteCommandAction.runWriteCommandAction(project, () -> {
                    String path = TestFileWriter.writeTestFile(project, psiFile, packageName, testClassName, TestCodeGenerated);
                    Messages.showInfoMessage("JUnit Java file created at location:\n" + path, "Unit Test Generated");
                });

                return;
                //}
            }
        }





public static String getPrompt(String javaVersion,
                                   String sparkVersion,
                                   String mockitoVersion,
                                   String language,
                                   String framework,
                                   String fullCode,
                                   String className,
                                   String TestClassName,
                                   String packageName
                                   )
    {


        String javaSparkPrompt = "You are a highly experienced software engineer with 30+ years of professional background at Google and Microsoft. You are an expert in Java and Apache Spark.\n" +
                "\n" +
                "I will provide you a block of Java code containing a method chain starting from an entry point method, with all dependent methods concatenated. Your job is to:\n" +
                "\n" +
                "---\n" +
                "\n" +
                " Objective:\n" +
                "- Generate high-quality, production-ready unit tests using JUnit \n" +
                "- Use SharedJavaSparkContext to test Spark logic like transformations, actions, and Dataset operations.\n" +
                "- Use the specified mocking library version .\n" +
                "- Do not assume or invent logic â€“ test only what's explicitly visible.\n" +
                "create @Before and @After and create spark session in @Before "+
                "Aslo put @RunWith on top top of class if supported syntactically"+

                "\n" +
                "---\n" +
                "\n" +
                " Constraints:\n" +
                "- Java version: "+javaVersion+"\n" +
                "- Spark version: "+sparkVersion+"\n" +
                "- Mockito version:"+mockitoVersion+"\n" +
                "\n" +
                " Input:\n" +
                "```java\n" +
                fullCode+
                "\n" +
                "```\n" +
                "\n" +
                " Return only:\n" +
                "- A complete unit test class with mocking and Spark setup\n" +
               "Also return entire java unit test ```java code ```"+"\n" +
                "Generate TestClassName as : " +TestClassName+
                "Generate Test package is : "+packageName
                ;

        if(language.equalsIgnoreCase("Java") && framework.equalsIgnoreCase("Java-Spark"))
        {

            return javaSparkPrompt;
        }

      return javaSparkPrompt;

    }






               UnitTestSettingsState settings = dialog.getSettings();






  DynamicTestPromptGenerator.TestConfig  testConfig=new DynamicTestPromptGenerator.
                        TestConfig(settings.language,settings.languageVersion,
                        settings.framework,settings.sparkVersion
                        ,settings.springBootVersion,settings.testFramework,
                        settings.mockitoVersion, settings.testFrameworkVersion,packageName,testClassName,fullCode);

                String promptBuilderGeneric=DynamicTestPromptGenerator.generatePrompt(testConfig);
                System.out.println("promptBuilderGeneric : "+promptBuilderGeneric);
