package com.yourplugin.sparklineageplugin;

import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.DialogWrapper;
import com.intellij.ui.components.JBScrollPane;
import com.intellij.ui.components.JBTabbedPane;
import com.intellij.util.ui.JBUI;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.border.TitledBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class LineageResultPanelEnhanced extends DialogWrapper {
    private String content;
    private JTextArea mermaidTextArea;
    private JTextArea descriptionArea;
    private JEditorPane htmlPreviewPane;
    private String extractedMermaid;
    private String extractedDescription;
    private boolean isEditing = false;
    private JButton editButton;
    private JButton saveButton;
    private JButton cancelButton;
    private String originalMermaid;
    private Timer autoRefreshTimer; // For auto-refresh functionality
    private JLabel statusLabel; // For real-time status updates

    // Professional color scheme - more sophisticated and enterprise-friendly
    private static final Color PRIMARY_COLOR = new Color(33, 150, 243);        // Material Blue
    private static final Color PRIMARY_DARK = new Color(25, 118, 210);         // Darker Blue
    private static final Color SECONDARY_COLOR = new Color(96, 125, 139);      // Blue Grey
    private static final Color ACCENT_COLOR = new Color(255, 152, 0);          // Amber
    private static final Color SUCCESS_COLOR = new Color(76, 175, 80);         // Green
    private static final Color WARNING_COLOR = new Color(255, 193, 7);         // Amber Warning
    private static final Color ERROR_COLOR = new Color(244, 67, 54);           // Red
    private static final Color BACKGROUND_COLOR = new Color(250, 250, 250);    // Light Background
    private static final Color CARD_COLOR = new Color(255, 255, 255);          // White Cards
    private static final Color TEXT_COLOR = new Color(66, 66, 66);             // Dark Grey Text
    private static final Color BORDER_COLOR = new Color(224, 224, 224);        // Light Border
    private static final Color SIDEBAR_COLOR = new Color(245, 245, 245);       // Sidebar Background

    protected LineageResultPanelEnhanced(Project project, String content) {
        super(project);
        this.content = content;
        this.extractedMermaid = MermaidValidator.extractAndRepair(content);
        this.originalMermaid = this.extractedMermaid;
        this.extractedDescription = extractDescription(content);
        
        // Initialize auto-refresh timer (500ms delay after typing stops)
        this.autoRefreshTimer = new Timer(500, e -> {
            if (isEditing) {
                refreshPreview();
                updateStatus("Preview updated", SUCCESS_COLOR);
            }
        });
        this.autoRefreshTimer.setRepeats(false);
        
        init();
        setTitle("Data Lineage Analysis - Enterprise Dashboard");
        setSize(1600, 1000); // Larger for better professional experience
    }

    @Nullable
    @Override
    protected JComponent createCenterPanel() {
        JPanel mainPanel = new JPanel(new BorderLayout());
        mainPanel.setBorder(JBUI.Borders.empty(0)); // Clean edges
        mainPanel.setBackground(BACKGROUND_COLOR);

        // Create professional header
        JPanel headerPanel = createHeaderPanel();
        
        // Create sidebar with enhanced design
        JPanel sidebarPanel = createProfessionalSidebarPanel();

        // Create main content area
        JPanel contentPanel = createProfessionalContentPanel();

        // Create status bar
        JPanel statusPanel = createStatusPanel();

        // Professional split pane
        JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
        splitPane.setLeftComponent(sidebarPanel);
        splitPane.setRightComponent(contentPanel);
        splitPane.setDividerLocation(500);
        splitPane.setResizeWeight(0.3);
        splitPane.setBorder(null);
        splitPane.setBackground(BACKGROUND_COLOR);
        splitPane.setDividerSize(2);

        mainPanel.add(headerPanel, BorderLayout.NORTH);
        mainPanel.add(splitPane, BorderLayout.CENTER);
        mainPanel.add(statusPanel, BorderLayout.SOUTH);

        return mainPanel;
    }

    private JPanel createHeaderPanel() {
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(PRIMARY_COLOR);
        headerPanel.setBorder(new EmptyBorder(20, 30, 20, 30));

        // Title section
        JPanel titlePanel = new JPanel(new BorderLayout());
        titlePanel.setBackground(PRIMARY_COLOR);
        
        JLabel titleLabel = new JLabel("Apache Spark Data Lineage Analysis");
        titleLabel.setFont(new Font("Segoe UI", Font.BOLD, 24));
        titleLabel.setForeground(Color.WHITE);
        
        JLabel subtitleLabel = new JLabel("Enterprise Data Flow Visualization & Analysis Platform");
        subtitleLabel.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        subtitleLabel.setForeground(new Color(255, 255, 255, 180));
        
        titlePanel.add(titleLabel, BorderLayout.NORTH);
        titlePanel.add(subtitleLabel, BorderLayout.SOUTH);

        // Action buttons in header
        JPanel headerActions = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 0));
        headerActions.setBackground(PRIMARY_COLOR);
        
        JButton exportBtn = createHeaderButton("Export", "Export diagram");
        JButton settingsBtn = createHeaderButton("Settings", "Configuration");
        JButton helpBtn = createHeaderButton("Help", "Documentation");
        
        exportBtn.addActionListener(e -> exportToHtml());
        
        headerActions.add(exportBtn);
        headerActions.add(settingsBtn);
        headerActions.add(helpBtn);

        headerPanel.add(titlePanel, BorderLayout.WEST);
        headerPanel.add(headerActions, BorderLayout.EAST);

        return headerPanel;
    }

    private JButton createHeaderButton(String text, String tooltip) {
        JButton button = new JButton(text);
        button.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        button.setBackground(PRIMARY_DARK);
        button.setForeground(Color.WHITE);
        button.setFocusPainted(false);
        button.setBorder(BorderFactory.createEmptyBorder(8, 16, 8, 16));
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
        button.setToolTipText(tooltip);
        
        // Subtle hover effect
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button.setBackground(new Color(21, 101, 192));
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                button.setBackground(PRIMARY_DARK);
            }
        });
        
        return button;
    }

    private JPanel createStatusPanel() {
        JPanel statusPanel = new JPanel(new BorderLayout());
        statusPanel.setBackground(SIDEBAR_COLOR);
        statusPanel.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createMatteBorder(1, 0, 0, 0, BORDER_COLOR),
                new EmptyBorder(10, 20, 10, 20)
        ));

        statusLabel = new JLabel("Ready");
        statusLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        statusLabel.setForeground(SECONDARY_COLOR);

        JLabel versionLabel = new JLabel("Spark Lineage Plugin v2.1.0");
        versionLabel.setFont(new Font("Segoe UI", Font.PLAIN, 11));
        versionLabel.setForeground(SECONDARY_COLOR);

        statusPanel.add(statusLabel, BorderLayout.WEST);
        statusPanel.add(versionLabel, BorderLayout.EAST);

        return statusPanel;
    }

    private void updateStatus(String message, Color color) {
        if (statusLabel != null) {
            statusLabel.setText(message);
            statusLabel.setForeground(color);
        }
    }

    private JPanel createProfessionalSidebarPanel() {
        JPanel sidebarPanel = new JPanel(new BorderLayout());
        sidebarPanel.setPreferredSize(new Dimension(500, 800));
        sidebarPanel.setBackground(SIDEBAR_COLOR);
        sidebarPanel.setBorder(BorderFactory.createMatteBorder(0, 0, 0, 1, BORDER_COLOR));

        // Create professional tabbed pane
        JBTabbedPane tabbedPane = new JBTabbedPane();
        tabbedPane.setBackground(SIDEBAR_COLOR);
        tabbedPane.setFont(new Font("Segoe UI", Font.PLAIN, 13));
        tabbedPane.setBorder(new EmptyBorder(10, 10, 10, 10));

        // Enhanced tabs
        tabbedPane.addTab("  Diagram Code  ", createEnhancedMermaidPanel());
        tabbedPane.addTab("  Analysis  ", createEnhancedDescriptionPanel());
        tabbedPane.addTab("  Raw Data  ", createEnhancedRawOutputPanel());

        sidebarPanel.add(tabbedPane, BorderLayout.CENTER);
        return sidebarPanel;
    }

    private JPanel createEnhancedMermaidPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));
        panel.setBackground(CARD_COLOR);

        // Professional header
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(new Color(227, 242, 253));
        headerPanel.setBorder(new EmptyBorder(15, 20, 15, 20));

        JLabel headerLabel = new JLabel("Mermaid Diagram Source");
        headerLabel.setFont(new Font("Segoe UI", Font.BOLD, 14));
        headerLabel.setForeground(PRIMARY_COLOR);

        JLabel editModeLabel = new JLabel("READ-ONLY MODE");
        editModeLabel.setFont(new Font("Segoe UI", Font.BOLD, 10));
        editModeLabel.setForeground(SECONDARY_COLOR);

        headerPanel.add(headerLabel, BorderLayout.WEST);
        headerPanel.add(editModeLabel, BorderLayout.EAST);
        panel.add(headerPanel, BorderLayout.NORTH);

        // Enhanced text area
        mermaidTextArea = new JTextArea(extractedMermaid != null ? extractedMermaid : "No Mermaid diagram found");
        mermaidTextArea.setFont(new Font("JetBrains Mono", Font.PLAIN, 12));
        mermaidTextArea.setLineWrap(true);
        mermaidTextArea.setWrapStyleWord(true);
        mermaidTextArea.setEditable(false);
        mermaidTextArea.setBackground(new Color(248, 249, 250));
        mermaidTextArea.setForeground(TEXT_COLOR);
        mermaidTextArea.setBorder(new EmptyBorder(15, 15, 15, 15));
        mermaidTextArea.setSelectionColor(new Color(33, 150, 243, 50));

        // Enhanced document listener for auto-refresh
        mermaidTextArea.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                handleTextChange();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                handleTextChange();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                handleTextChange();
            }

            private void handleTextChange() {
                if (isEditing) {
                    autoRefreshTimer.restart(); // Restart timer on each change
                    validateMermaidSyntax();
                    updateStatus("Editing... Auto-refresh in 0.5s", WARNING_COLOR);
                }
            }
        });

        JBScrollPane scrollPane = new JBScrollPane(mermaidTextArea);
        scrollPane.setPreferredSize(new Dimension(450, 300));
        scrollPane.setBorder(BorderFactory.createLineBorder(BORDER_COLOR));
        panel.add(scrollPane, BorderLayout.CENTER);

        // Professional control panel
        JPanel controlPanel = createProfessionalControlPanel(editModeLabel);
        panel.add(controlPanel, BorderLayout.SOUTH);

        return panel;
    }

    private JPanel createProfessionalControlPanel(JLabel editModeLabel) {
        JPanel controlPanel = new JPanel(new BorderLayout());
        controlPanel.setBackground(CARD_COLOR);
        controlPanel.setBorder(new EmptyBorder(15, 0, 0, 0));

        // Edit controls
        JPanel editPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 0));
        editPanel.setBackground(CARD_COLOR);

        editButton = createProfessionalButton("Edit", PRIMARY_COLOR, "Edit diagram source");
        editButton.addActionListener(e -> toggleEditMode(editModeLabel));

        saveButton = createProfessionalButton("Save", SUCCESS_COLOR, "Save changes");
        saveButton.addActionListener(e -> saveMermaidChanges());
        saveButton.setVisible(false);

        cancelButton = createProfessionalButton("Cancel", ERROR_COLOR, "Cancel changes");
        cancelButton.addActionListener(e -> cancelMermaidEditing(editModeLabel));
        cancelButton.setVisible(false);

        editPanel.add(editButton);
        editPanel.add(saveButton);
        editPanel.add(cancelButton);

        // Utility controls
        JPanel utilityPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 0));
        utilityPanel.setBackground(CARD_COLOR);

        JButton copyBtn = createProfessionalButton("Copy", SECONDARY_COLOR, "Copy to clipboard");
        copyBtn.addActionListener(e -> copyMermaidToClipboard());

        JButton validateBtn = createProfessionalButton("Validate", ACCENT_COLOR, "Validate syntax");
        validateBtn.addActionListener(e -> validateMermaidSyntax());

        utilityPanel.add(copyBtn);
        utilityPanel.add(validateBtn);

        controlPanel.add(editPanel, BorderLayout.WEST);
        controlPanel.add(utilityPanel, BorderLayout.EAST);

        return controlPanel;
    }

    private JButton createProfessionalButton(String text, Color color, String tooltip) {
        JButton button = new JButton(text);
        button.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        button.setBackground(color);
        button.setForeground(Color.WHITE);
        button.setFocusPainted(false);
        button.setBorder(BorderFactory.createEmptyBorder(8, 16, 8, 16));
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
        button.setToolTipText(tooltip);

        // Professional hover effect
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (button.isEnabled()) {
                    button.setBackground(color.darker());
                }
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                if (button.isEnabled()) {
                    button.setBackground(color);
                }
            }
        });

        return button;
    }

    private void toggleEditMode(JLabel editModeLabel) {
        isEditing = !isEditing;
        mermaidTextArea.setEditable(isEditing);

        if (isEditing) {
            // Enter edit mode
            mermaidTextArea.setBackground(Color.WHITE);
            mermaidTextArea.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(PRIMARY_COLOR, 2),
                    new EmptyBorder(13, 13, 13, 13)
            ));
            
            editButton.setText("Editing...");
            editButton.setBackground(SECONDARY_COLOR);
            editButton.setEnabled(false);
            saveButton.setVisible(true);
            cancelButton.setVisible(true);

            editModeLabel.setText("EDIT MODE - AUTO-REFRESH ON");
            editModeLabel.setForeground(PRIMARY_COLOR);
            
            mermaidTextArea.requestFocus();
            updateStatus("Edit mode activated - Changes auto-refresh preview", PRIMARY_COLOR);
        } else {
            exitEditMode(editModeLabel);
        }

        mermaidTextArea.getParent().getParent().revalidate();
        mermaidTextArea.getParent().getParent().repaint();
    }

    private void exitEditMode(JLabel editModeLabel) {
        isEditing = false;
        autoRefreshTimer.stop(); // Stop auto-refresh timer
        
        mermaidTextArea.setEditable(false);
        mermaidTextArea.setBackground(new Color(248, 249, 250));
        mermaidTextArea.setBorder(new EmptyBorder(15, 15, 15, 15));

        editButton.setText("Edit");
        editButton.setBackground(PRIMARY_COLOR);
        editButton.setEnabled(true);
        saveButton.setVisible(false);
        cancelButton.setVisible(false);

        editModeLabel.setText("READ-ONLY MODE");
        editModeLabel.setForeground(SECONDARY_COLOR);
        
        updateStatus("Edit mode deactivated", SECONDARY_COLOR);
    }

    private void saveMermaidChanges() {
        String newMermaidCode = mermaidTextArea.getText().trim();

        if (newMermaidCode.isEmpty()) {
            showProfessionalMessage("Validation Error", "Mermaid code cannot be empty.", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!isValidMermaidSyntax(newMermaidCode)) {
            int result = JOptionPane.showConfirmDialog(getContentPane(),
                    "The Mermaid syntax may have issues. Save anyway?",
                    "Syntax Validation", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            if (result != JOptionPane.YES_OPTION) {
                return;
            }
        }

        extractedMermaid = newMermaidCode;
        originalMermaid = newMermaidCode;
        
        // Get edit mode label and exit edit mode
        JLabel editModeLabel = findEditModeLabel();
        exitEditMode(editModeLabel);

        // Final refresh of preview
        refreshPreview();
        
        showProfessionalMessage("Success", "Diagram updated successfully!", JOptionPane.INFORMATION_MESSAGE);
        updateStatus("Changes saved successfully", SUCCESS_COLOR);
    }

    private void cancelMermaidEditing(JLabel editModeLabel) {
        mermaidTextArea.setText(originalMermaid);
        extractedMermaid = originalMermaid;
        exitEditMode(editModeLabel);
        refreshPreview();
        updateStatus("Changes cancelled", WARNING_COLOR);
    }

    private JLabel findEditModeLabel() {
        // Helper method to find the edit mode label - you might need to adjust this based on your component hierarchy
        return null; // Placeholder - implement based on your needs
    }

    private void showProfessionalMessage(String title, String message, int messageType) {
        JOptionPane.showMessageDialog(getContentPane(), message, title, messageType);
    }

    private void validateMermaidSyntax() {
        String mermaidCode = mermaidTextArea.getText().trim();
        
        if (mermaidCode.isEmpty()) {
            return;
        }

        boolean isValid = isValidMermaidSyntax(mermaidCode);
        
        if (isEditing) {
            Color borderColor = isValid ? SUCCESS_COLOR : ERROR_COLOR;
            mermaidTextArea.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(borderColor, 2),
                    new EmptyBorder(13, 13, 13, 13)
            ));
            
            updateStatus(isValid ? "Syntax valid" : "Syntax errors detected", 
                        isValid ? SUCCESS_COLOR : ERROR_COLOR);
        }
    }

    private boolean isValidMermaidSyntax(String mermaidCode) {
        if (mermaidCode == null || mermaidCode.trim().isEmpty()) {
            return false;
        }

        String[] validTypes = {"graph", "flowchart", "sequenceDiagram", "classDiagram",
                "stateDiagram", "gantt", "pie", "gitgraph", "erDiagram"};

        String firstLine = mermaidCode.split("\n")[0].trim().toLowerCase();

        for (String type : validTypes) {
            if (firstLine.startsWith(type.toLowerCase())) {
                return true;
            }
        }

        return mermaidCode.contains("-->") || mermaidCode.contains("->") ||
                mermaidCode.contains("---") || mermaidCode.contains("==");
    }

    private JPanel createEnhancedDescriptionPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));
        panel.setBackground(CARD_COLOR);

        // Professional header
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(new Color(232, 245, 233));
        headerPanel.setBorder(new EmptyBorder(15, 20, 15, 20));

        JLabel headerLabel = new JLabel("Lineage Analysis Summary");
        headerLabel.setFont(new Font("Segoe UI", Font.BOLD, 14));
        headerLabel.setForeground(SUCCESS_COLOR);
        headerPanel.add(headerLabel, BorderLayout.CENTER);

        panel.add(headerPanel, BorderLayout.NORTH);

        descriptionArea = new JTextArea(extractedDescription != null ? extractedDescription : "No analysis description available");
        descriptionArea.setFont(new Font("Segoe UI", Font.PLAIN, 13));
        descriptionArea.setLineWrap(true);
        descriptionArea.setWrapStyleWord(true);
        descriptionArea.setEditable(false);
        descriptionArea.setBackground(new Color(252, 253, 254));
        descriptionArea.setForeground(TEXT_COLOR);
        descriptionArea.setBorder(new EmptyBorder(15, 15, 15, 15));
        descriptionArea.setSelectionColor(new Color(76, 175, 80, 50));

        JBScrollPane scrollPane = new JBScrollPane(descriptionArea);
        scrollPane.setPreferredSize(new Dimension(450, 300));
        scrollPane.setBorder(BorderFactory.createLineBorder(BORDER_COLOR));
        panel.add(scrollPane, BorderLayout.CENTER);

        return panel;
    }

    private JPanel createEnhancedRawOutputPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));
        panel.setBackground(CARD_COLOR);

        // Professional header
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(new Color(255, 243, 224));
        headerPanel.setBorder(new EmptyBorder(15, 20, 15, 20));

        JLabel headerLabel = new JLabel("Raw Analysis Output");
        headerLabel.setFont(new Font("Segoe UI", Font.BOLD, 14));
        headerLabel.setForeground(ACCENT_COLOR);
        headerPanel.add(headerLabel, BorderLayout.CENTER);

        panel.add(headerPanel, BorderLayout.NORTH);

        JTextArea rawArea = new JTextArea(content);
        rawArea.setFont(new Font("JetBrains Mono", Font.PLAIN, 11));
        rawArea.setLineWrap(true);
        rawArea.setWrapStyleWord(true);
        rawArea.setEditable(false);
        rawArea.setBackground(new Color(245, 245, 245));
        rawArea.setForeground(TEXT_COLOR);
        rawArea.setBorder(new EmptyBorder(15, 15, 15, 15));

        JBScrollPane scrollPane = new JBScrollPane(rawArea);
        scrollPane.setPreferredSize(new Dimension(450, 300));
        scrollPane.setBorder(BorderFactory.createLineBorder(BORDER_COLOR));
        panel.add(scrollPane, BorderLayout.CENTER);

        return panel;
    }

    private JPanel createProfessionalContentPanel() {
        JPanel contentPanel = new JPanel(new BorderLayout());
        contentPanel.setBackground(CARD_COLOR);

        // Professional preview header
        JPanel previewHeader = new JPanel(new BorderLayout());
        previewHeader.setBackground(PRIMARY_COLOR);
        previewHeader.setBorder(new EmptyBorder(15, 20, 15, 20));

        JLabel previewLabel = new JLabel("Interactive Diagram Preview");
        previewLabel.setFont(new Font("Segoe UI", Font.BOLD, 16));
        previewLabel.setForeground(Color.WHITE);

        JLabel autoRefreshLabel = new JLabel("Auto-refresh: ON");
        autoRefreshLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        autoRefreshLabel.setForeground(new Color(255, 255, 255, 180));

        previewHeader.add(previewLabel, BorderLayout.WEST);
        previewHeader.add(autoRefreshLabel, BorderLayout.EAST);

        contentPanel.add(previewHeader, BorderLayout.NORTH);

        // Enhanced HTML preview
        htmlPreviewPane = new JEditorPane("text/html", generateEnhancedHtmlContent());
        htmlPreviewPane.setEditable(false);
        htmlPreviewPane.setBackground(Color.WHITE);
        htmlPreviewPane.setBorder(new EmptyBorder(15, 15, 15, 15));

        JBScrollPane htmlScrollPane = new JBScrollPane(htmlPreviewPane);
        htmlScrollPane.setPreferredSize(new Dimension(800, 700));
        htmlScrollPane.setBorder(null);
        htmlScrollPane.getVerticalScrollBar().setUnitIncrement(16);

        contentPanel.add(htmlScrollPane, BorderLayout.CENTER);

        return contentPanel;
    }

    private void refreshPreview() {
        SwingUtilities.invokeLater(() -> {
            try {
                htmlPreviewPane.setText(generateEnhancedHtmlContent());
                htmlPreviewPane.revalidate();
                htmlPreviewPane.repaint();
            } catch (Exception e) {
                updateStatus("Preview refresh failed", ERROR_COLOR);
            }
        });
    }

    private String generateEnhancedHtmlContent() {
        if (extractedMermaid == null || extractedMermaid.isEmpty()) {
            return generateErrorHtml();
        }

        return "<!DOCTYPE html>\n" +
                "<html>\n" +
                "<head>\n" +
                "    <meta charset=\"UTF-8\">\n" +
                "    <title>Enterprise Spark Lineage Analysis</title>\n" +
                "    <script src=\"https://cdn.jsdelivr.net/npm/mermaid@10.6.1/dist/mermaid.min.js\"></script>\n" +
                "    <style>\n" +
                generateProfessionalCSS() +
                "    </style>\n" +
                "</head>\n" +
                "<body>\n" +
                "    <div class=\"enterprise-container\">\n" +
                "        <div class=\"diagram-header\">\n" +
                "            <h1>Data Lineage Flow Analysis</h1>\n" +
                "            <div class=\"header-info\">\n" +
                "                <span class=\"badge\">Apache Spark</span>\n" +
                "                <span class=\"badge secondary\">Enterprise Edition</span>\n" +
                "            </div>\n" +
                "        </div>\n" +
                "        <div class=\"diagram-container\">\n" +
                "            <div class=\"mermaid\">\n" +
                extractedMermaid + "\n" +
                "            </div>\n" +
                "        </div>\n" +
                "        <div class=\"diagram-footer\">\n" +
                "            <p>Generated by Enterprise Spark Lineage Analysis Platform</p>\n" +
                "        </div>\n" +
                "    </div>\n" +
                "    <script>\n" +
                generateProfessionalMermaidConfig() +
                "    </script>\n" +
                "</body>\n" +
                "</html>";
    }

    private String generateProfessionalCSS() {
        return "        * {\n" +
                "            margin: 0;\n" +
                "            padding: 0;\n" +
                "            box-sizing: border-box;\n" +
                "        }\n" +
                "        body {\n" +
                "            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n" +
                "            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n" +
                "            min-height: 100vh;\n" +
                "            display: flex;\n" +
                "            align-items: center;\n" +
                "            justify-content: center;\n" +
                "            padding: 20px;\n" +
                "        }\n" +
                "        .enterprise-container {\n" +
                "            width: 100%;\n" +
                "            max-width: 1400px;\n" +
                "            background: #ffffff;\n" +
                "            border-radius: 12px;\n" +
                "            box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n" +
                "            overflow: hidden;\n" +
                "        }\n" +