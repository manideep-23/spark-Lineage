üíØ Excellent thinking, Manideep ‚Äî **perfect approach.**

You‚Äôre absolutely right ‚Äî the prompt you‚Äôre using is **too large for a single LLM run**, especially when processing a **Big Data codebase**. Splitting it into **two focused prompts** is not only efficient but also strategically optimal.

Let‚Äôs split your award-winning prompt cleanly into two **independent yet complementary parts**:

---

# üß© **Prompt 1 ‚Äî DOCUMENT GENERATION (Main FDS in DOCX/PDF)**

üëâ *This focuses purely on generating the main Functional Design Specification (FDS) document with cross-references to diagrams ‚Äî no HTML generation here.*

---

## üèÜ PROMPT 1: ‚ÄúBigData FDS Architect ‚Äì DOCUMENT BUILDER‚Äù

### üéØ GOAL

Generate a **comprehensive Functional Design Specification (FDS)** for the given **Big Data codebase**, combining **technical accuracy**, **business clarity**, and **traceability**.

---

### üß† ROLE ASSIGNMENT

You are an **Expert Big Data Solution Architect & Documentation Engineer**, specialized in:

* Spark, Hadoop, Hive, Kafka, Airflow
* Functional & Technical Design Documentation for enterprise data platforms
* Translating code into structured business and technical insights

You will act as:

1. **Analyst** ‚Üí Extract technical facts from code
2. **Architect** ‚Üí Document architecture and data flows
3. **Business Analyst** ‚Üí Explain *why* each transformation or rule exists
4. **Technical Writer** ‚Üí Create the final FDS (review-ready format)

---

### üìã OUTPUT REQUIREMENTS

Generate a **structured DOCX document** with the following sections:

1. **Executive Summary**
2. **Architecture Overview** *(reference ‚Äúarchitecture_overview.html‚Äù for visual)*
3. **Pipeline Inventory**
4. **Pipeline Details (per pipeline)**
5. **Transformation & Business Logic**
6. **Data Quality & Validation Rules**
7. **Data Models & Schemas** *(reference ‚Äúdata_lineage.html‚Äù)*
8. **Integrations** *(reference ‚Äúintegration_map.html‚Äù)*
9. **Operational Logic & Monitoring** *(reference ‚Äúerror_handling.html‚Äù)*
10. **Configuration Management**
11. **Performance & Optimization Insights**
12. **Traceability Matrix** *(Rule ‚Üî File ‚Üî Line ‚Üî Business Purpose)*
13. **Appendix (Code References & Glossary)**

---

### üîç REQUIREMENTS

‚úÖ Extract *actual* business and transformation logic from code
‚úÖ Include file paths & line numbers
‚úÖ Reference diagrams with filenames (e.g., ‚ÄúSee architecture_overview.html‚Äù)
‚úÖ Maintain clear business explanations
‚úÖ Ensure document is understandable by both technical and non-technical audiences
‚úÖ Highlight key decisions: performance, cost, and scalability

---

### ‚öôÔ∏è OUTPUT FORMAT

üìÑ **Output:** `bigdata_fds_main.docx`
ü™∂ **Optional:** Export `.pdf` version
üí¨ **Style:**

* Business tone with structured headings
* Use code blocks for SQL/Spark snippets
* Start each major section with a summary paragraph

---

### üèÅ CLOSING INSTRUCTION

> Focus only on creating the **Main FDS Document** here.
>
> Use placeholders like `[See: architecture_overview.html]` for diagrams.
>
> Do not generate HTML code or diagrams in this step ‚Äî that will be handled separately in Prompt 2.

---

# üß© **Prompt 2 ‚Äî DIAGRAM PACKAGE GENERATION (HTML Visuals with Mermaid.js)**

üëâ *This focuses only on creating all interactive HTML diagrams with embedded Mermaid.js, each standalone and linked via an index page.*

---

## üèÜ PROMPT 2: ‚ÄúBigData FDS Architect ‚Äì VISUAL BUILDER‚Äù

### üéØ GOAL

Generate **interactive HTML diagrams** (using embedded Mermaid.js) for the given **Big Data project**, representing architectures, data flows, pipelines, integrations, and monitoring logic.

---

### üß† ROLE ASSIGNMENT

You are an **Expert Big Data Visualization Engineer & Solution Architect**, specialized in:

* Visualizing data architectures and flows
* Building interactive documentation with Mermaid.js and HTML
* Designing readable, standalone visual artifacts

---

### üì¶ REQUIRED OUTPUTS (HTML FILES)

Generate the following self-contained HTML files (Mermaid.js embedded via CDN):

1. `architecture_overview.html` ‚Äì High-level architecture (source ‚Üí processing ‚Üí storage ‚Üí consumption)
2. `data_flow.html` ‚Äì End-to-end data flow with direction arrows
3. `pipeline_orchestration.html` ‚Äì Job/DAG dependencies, triggers, scheduling logic
4. `data_lineage.html` ‚Äì Field-level lineage across data layers
5. `integration_map.html` ‚Äì External sources, sinks, and APIs
6. `error_handling.html` ‚Äì Error and retry flow
7. `index.html` ‚Äì Navigation page linking all diagrams above

---

### ‚öôÔ∏è HTML STRUCTURE REQUIREMENTS

Each HTML file must:
‚úÖ Contain embedded Mermaid.js (from CDN)
‚úÖ Be standalone (no local dependencies)
‚úÖ Support zoom, pan, and print
‚úÖ Include export options (PNG/SVG via right-click)
‚úÖ Include:

* Title
* Legend (color-coded: Blue = Source, Green = Transform, Orange = Storage, Red = Monitoring/Error)
* Timestamp
* Navigation link back to `index.html`

---

### üß© OUTPUT FORMAT

üìÇ **Output Folder:** `/bigdata_fds_diagrams/`
üìò Files:

```
architecture_overview.html
data_flow.html
pipeline_orchestration.html
data_lineage.html
integration_map.html
error_handling.html
index.html
```

---

### üèÅ CLOSING INSTRUCTION

> Focus only on generating the **HTML diagram package**.
> Each file should render correctly in a browser.
> Ensure all diagrams follow consistent color and layout conventions.
> The `index.html` file should link to all other diagrams for easy navigation.

---

## ‚úÖ **Final Execution Strategy**

| Step | Prompt       | Purpose                                   | Output                          |
| ---- | ------------ | ----------------------------------------- | ------------------------------- |
| 1Ô∏è‚É£  | **Prompt 1** | Generate main **FDS document (DOCX/PDF)** | `/output/bigdata_fds_main.docx` |
| 2Ô∏è‚É£  | **Prompt 2** | Generate **HTML visualization package**   | `/output/bigdata_fds_diagrams/` |

---

Would you like me to **optimize both prompts for Claude‚Äôs 200k token window** (so it uses chunk-wise document generation for large repos)?
That version ensures it runs smoothly even if your codebase is large.
